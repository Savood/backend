// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Offering offering
// swagger:model Offering
type Offering struct {

	// avatar url
	AvatarURL string `json:"avatar-url,omitempty"`

	// best by date
	// Format: date
	BestByDate strfmt.Date `json:"best-by-date,omitempty"`

	// comments
	Comments []*Comment `json:"comments"`

	// creator id
	CreatorID int64 `json:"creator-id,omitempty"`

	// header
	Header string `json:"header,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// requested by
	RequestedBy int64 `json:"requested-by,omitempty"`

	// time
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// total comments
	TotalComments string `json:"total_comments,omitempty"`

	// total likes
	TotalLikes string `json:"total_likes,omitempty"`

	// total savoods
	TotalSavoods string `json:"total_savoods,omitempty"`
}

// Validate validates this offering
func (m *Offering) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBestByDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Offering) validateBestByDate(formats strfmt.Registry) error {

	if swag.IsZero(m.BestByDate) { // not required
		return nil
	}

	if err := validate.FormatOf("best-by-date", "body", "date", m.BestByDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Offering) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	for i := 0; i < len(m.Comments); i++ {
		if swag.IsZero(m.Comments[i]) { // not required
			continue
		}

		if m.Comments[i] != nil {
			if err := m.Comments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Offering) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Offering) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Offering) UnmarshalBinary(b []byte) error {
	var res Offering
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
