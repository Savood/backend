// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "denn nur lebendiges food tut gut",
    "title": "Savood",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0"
  },
  "basePath": "/v2/",
  "paths": {
    "/chats/": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "messages"
        ],
        "summary": "Get all Chats",
        "operationId": "getAllChats",
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Chat"
              }
            }
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      }
    },
    "/chats/{chatID}/messages": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "messages"
        ],
        "summary": "Add a new message",
        "operationId": "getAllMessagesForChat",
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Message"
              }
            }
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "messages"
        ],
        "summary": "Add a new message",
        "operationId": "createNewMessage",
        "parameters": [
          {
            "description": "Message that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "chatID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/chats/{chatID}/messages/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "messages"
        ],
        "summary": "Display a message",
        "operationId": "getMessageById",
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "messages"
        ],
        "summary": "Delete a message",
        "operationId": "deleteMessageById",
        "responses": {
          "204": {
            "description": "Removed; No response."
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "messages"
        ],
        "summary": "Update a message",
        "operationId": "updateMessageById",
        "parameters": [
          {
            "description": "New parameters of the message",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Accepted; No response."
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "chatID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/feed": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings"
        ],
        "summary": "Display a feed of nearby offerings",
        "operationId": "getFeed",
        "parameters": [
          {
            "type": "number",
            "description": "Latitude",
            "name": "lat",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "Longitude",
            "name": "lon",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "Distance in Meters",
            "name": "distance",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Offering"
              }
            }
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "security": [],
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check Server status",
        "operationId": "healthcheckGet",
        "responses": {
          "200": {
            "description": "Server is healthy"
          },
          "503": {
            "$ref": "#/responses/Unhealthy"
          }
        }
      }
    },
    "/offering/{id}/image": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "Uploads avatar image.",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "upfile",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Accepted; No response."
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/offerings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings"
        ],
        "summary": "Display a feed of nearby offerings",
        "operationId": "getOfferings",
        "parameters": [
          {
            "enum": [
              "owned",
              "requested"
            ],
            "type": "string",
            "description": "Filteres offerings by owned or requested",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Offering"
              }
            }
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings"
        ],
        "summary": "Add a new offering",
        "operationId": "createNewOffering",
        "parameters": [
          {
            "description": "Offering that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Offering"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "$ref": "#/definitions/Offering"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/offerings/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings"
        ],
        "summary": "Display an offering",
        "operationId": "getOfferingById",
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "$ref": "#/definitions/Offering"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings"
        ],
        "summary": "Delete an offering",
        "operationId": "deleteOfferingById",
        "responses": {
          "204": {
            "description": "Removed; No response."
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings"
        ],
        "summary": "Update an offering",
        "operationId": "updateOfferingById",
        "parameters": [
          {
            "description": "New parameters of the offering",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Offering"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Accepted; No response."
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/offerings/{id}/chats": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings",
          "messages"
        ],
        "summary": "Display a user",
        "operationId": "getAllChatsForOffering",
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Chat"
              }
            }
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/placeSavood": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "rpc-calls",
          "offering"
        ],
        "summary": "Places a savood on an offering",
        "operationId": "placeSavood",
        "parameters": [
          {
            "type": "string",
            "description": "The offering ID on which the savood should be placed.",
            "name": "offeringId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Savood is placed",
            "schema": {
              "$ref": "#/definitions/SuccessObject"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      }
    },
    "/users": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Add a new user",
        "operationId": "createNewUser",
        "parameters": [
          {
            "description": "User that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Display a user",
        "operationId": "getUserById",
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Delete a users",
        "operationId": "deleteUserById",
        "responses": {
          "204": {
            "description": "Removed; No response."
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Update a user",
        "operationId": "updateUserById",
        "parameters": [
          {
            "description": "New parameters of the User",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Accepted; No response."
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{id}/image": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "Uploads avatar image.",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "upfile",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Accepted; No response."
          },
          "400": {
            "$ref": "#/responses/InvalidParameterInput"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "street": {
          "type": "string"
        },
        "zip": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Chat": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "offeringId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "partner": {
          "$ref": "#/definitions/UserShort"
        }
      },
      "example": {
        "_id": "17",
        "offeringId": [
          1,
          2,
          3,
          4,
          5
        ],
        "partner": {
          "_id": "5",
          "avatarId": "/assets/img/sarah-avatar.png.jpeg",
          "firstname": "Marty",
          "lastname": "McFlfy"
        }
      }
    },
    "ErrorModel": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "InvalidParameterInput": {
      "type": "object",
      "required": [
        "attribute",
        "message"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "from": {
          "$ref": "#/definitions/UserShort"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "Message"
      }
    },
    "Offering": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "avatarId": {
          "type": "string"
        },
        "best-by-date": {
          "type": "string",
          "format": "date"
        },
        "creatorId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "location": {
          "type": "object",
          "properties": {
            "coordinates": {
              "description": "longitude then latidue as floats",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "type": {
              "type": "string"
            }
          }
        },
        "name": {
          "type": "string"
        },
        "requested-by": {
          "type": "integer",
          "format": "int64"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "Offering"
      },
      "example": {
        "_id": "string",
        "avatarId": "/assets/img/speakers/bear.jpg",
        "best-by-date": "2018-06-21T13:55:58.380Z",
        "creatorId": "27",
        "header": "Keine Ahnung",
        "location": "Somewhere Over, The Rainbow",
        "name": "Normale Kartoffeln",
        "requested-by": 12,
        "time": "2018-06-21T13:55:58.380Z"
      }
    },
    "Principal": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        }
      }
    },
    "SuccessObject": {
      "type": "object",
      "properties": {
        "success": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "avatarId": {
          "type": "string"
        },
        "backgroundId": {
          "type": "string"
        },
        "badges": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "phone": {
          "type": "string",
          "format": "phone"
        }
      },
      "xml": {
        "name": "user"
      },
      "example": {
        "_id": "5",
        "address": {
          "city": "Musterstadt",
          "number": 1337,
          "street": "Musterstraße",
          "zip": 42069
        },
        "avatarId": "",
        "backgroundId": "",
        "badges": [
          true,
          false,
          true,
          true,
          true,
          false,
          false,
          true,
          false
        ],
        "description": "I save the wrap and the world",
        "email": "apiteam@swagger.io",
        "firstname": "Marty",
        "lastname": "McFlfy",
        "phone": "202-555-0191"
      }
    },
    "UserShort": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "avatarId": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        }
      },
      "xml": {
        "name": "user"
      },
      "example": {
        "_id": "5",
        "avatarId": "",
        "firstname": "Marty",
        "lastname": "McFlfy"
      }
    }
  },
  "responses": {
    "ErrorResponse": {
      "description": "Generic Error",
      "schema": {
        "$ref": "#/definitions/ErrorModel"
      }
    },
    "InvalidParameterInput": {
      "description": "Invalid parameter input was passed",
      "schema": {
        "$ref": "#/definitions/InvalidParameterInput"
      }
    },
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "$ref": "#/definitions/ErrorModel"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/ErrorModel"
      }
    },
    "Unhealthy": {
      "description": "Server is unhealthy",
      "schema": {
        "$ref": "#/definitions/ErrorModel"
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ],
  "tags": [
    {
      "description": "Management of users",
      "name": "users"
    },
    {
      "description": "Management of offered food items",
      "name": "offerings"
    },
    {
      "description": "Operations about users",
      "name": "messages"
    },
    {
      "description": "Operation regarding helath of application",
      "name": "health"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "denn nur lebendiges food tut gut",
    "title": "Savood",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0"
  },
  "basePath": "/v2/",
  "paths": {
    "/chats/": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "messages"
        ],
        "summary": "Get all Chats",
        "operationId": "getAllChats",
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Chat"
              }
            }
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      }
    },
    "/chats/{chatID}/messages": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "messages"
        ],
        "summary": "Add a new message",
        "operationId": "getAllMessagesForChat",
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Message"
              }
            }
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "messages"
        ],
        "summary": "Add a new message",
        "operationId": "createNewMessage",
        "parameters": [
          {
            "description": "Message that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "chatID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/chats/{chatID}/messages/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "messages"
        ],
        "summary": "Display a message",
        "operationId": "getMessageById",
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "messages"
        ],
        "summary": "Delete a message",
        "operationId": "deleteMessageById",
        "responses": {
          "204": {
            "description": "Removed; No response."
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "messages"
        ],
        "summary": "Update a message",
        "operationId": "updateMessageById",
        "parameters": [
          {
            "description": "New parameters of the message",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Accepted; No response."
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "chatID",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/feed": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings"
        ],
        "summary": "Display a feed of nearby offerings",
        "operationId": "getFeed",
        "parameters": [
          {
            "type": "number",
            "description": "Latitude",
            "name": "lat",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "Longitude",
            "name": "lon",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "Distance in Meters",
            "name": "distance",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Offering"
              }
            }
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "security": [],
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check Server status",
        "operationId": "healthcheckGet",
        "responses": {
          "200": {
            "description": "Server is healthy"
          },
          "503": {
            "description": "Server is unhealthy",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/offering/{id}/image": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "Uploads avatar image.",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "upfile",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Accepted; No response."
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          },
          "500": {
            "description": "Generic Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/offerings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings"
        ],
        "summary": "Display a feed of nearby offerings",
        "operationId": "getOfferings",
        "parameters": [
          {
            "enum": [
              "owned",
              "requested"
            ],
            "type": "string",
            "description": "Filteres offerings by owned or requested",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Offering"
              }
            }
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings"
        ],
        "summary": "Add a new offering",
        "operationId": "createNewOffering",
        "parameters": [
          {
            "description": "Offering that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Offering"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "$ref": "#/definitions/Offering"
            }
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          },
          "500": {
            "description": "Generic Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/offerings/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings"
        ],
        "summary": "Display an offering",
        "operationId": "getOfferingById",
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "$ref": "#/definitions/Offering"
            }
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings"
        ],
        "summary": "Delete an offering",
        "operationId": "deleteOfferingById",
        "responses": {
          "204": {
            "description": "Removed; No response."
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings"
        ],
        "summary": "Update an offering",
        "operationId": "updateOfferingById",
        "parameters": [
          {
            "description": "New parameters of the offering",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Offering"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Accepted; No response."
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/offerings/{id}/chats": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "offerings",
          "messages"
        ],
        "summary": "Display a user",
        "operationId": "getAllChatsForOffering",
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Chat"
              }
            }
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/placeSavood": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "rpc-calls",
          "offering"
        ],
        "summary": "Places a savood on an offering",
        "operationId": "placeSavood",
        "parameters": [
          {
            "type": "string",
            "description": "The offering ID on which the savood should be placed.",
            "name": "offeringId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Savood is placed",
            "schema": {
              "$ref": "#/definitions/SuccessObject"
            }
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Add a new user",
        "operationId": "createNewUser",
        "parameters": [
          {
            "description": "User that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Display a user",
        "operationId": "getUserById",
        "responses": {
          "200": {
            "description": "Object found and returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Delete a users",
        "operationId": "deleteUserById",
        "responses": {
          "204": {
            "description": "Removed; No response."
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "summary": "Update a user",
        "operationId": "updateUserById",
        "parameters": [
          {
            "description": "New parameters of the User",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Accepted; No response."
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{id}/image": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "Uploads avatar image.",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "upfile",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Accepted; No response."
          },
          "400": {
            "description": "Invalid parameter input was passed",
            "schema": {
              "$ref": "#/definitions/InvalidParameterInput"
            }
          },
          "500": {
            "description": "Generic Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "street": {
          "type": "string"
        },
        "zip": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Chat": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "offeringId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "partner": {
          "$ref": "#/definitions/UserShort"
        }
      },
      "example": {
        "_id": "17",
        "offeringId": [
          1,
          2,
          3,
          4,
          5
        ],
        "partner": {
          "_id": "5",
          "avatarId": "/assets/img/sarah-avatar.png.jpeg",
          "firstname": "Marty",
          "lastname": "McFlfy"
        }
      }
    },
    "ErrorModel": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "InvalidParameterInput": {
      "type": "object",
      "required": [
        "attribute",
        "message"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "from": {
          "$ref": "#/definitions/UserShort"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "Message"
      }
    },
    "Offering": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "avatarId": {
          "type": "string"
        },
        "best-by-date": {
          "type": "string",
          "format": "date"
        },
        "creatorId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/offeringLocation"
        },
        "name": {
          "type": "string"
        },
        "requested-by": {
          "type": "integer",
          "format": "int64"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "Offering"
      },
      "example": {
        "_id": "string",
        "avatarId": "/assets/img/speakers/bear.jpg",
        "best-by-date": "2018-06-21T13:55:58.380Z",
        "creatorId": "27",
        "header": "Keine Ahnung",
        "location": "Somewhere Over, The Rainbow",
        "name": "Normale Kartoffeln",
        "requested-by": 12,
        "time": "2018-06-21T13:55:58.380Z"
      }
    },
    "Principal": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        }
      }
    },
    "SuccessObject": {
      "type": "object",
      "properties": {
        "success": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "avatarId": {
          "type": "string"
        },
        "backgroundId": {
          "type": "string"
        },
        "badges": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "phone": {
          "type": "string",
          "format": "phone"
        }
      },
      "xml": {
        "name": "user"
      },
      "example": {
        "_id": "5",
        "address": {
          "city": "Musterstadt",
          "number": 1337,
          "street": "Musterstraße",
          "zip": 42069
        },
        "avatarId": "",
        "backgroundId": "",
        "badges": [
          true,
          false,
          true,
          true,
          true,
          false,
          false,
          true,
          false
        ],
        "description": "I save the wrap and the world",
        "email": "apiteam@swagger.io",
        "firstname": "Marty",
        "lastname": "McFlfy",
        "phone": "202-555-0191"
      }
    },
    "UserShort": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "avatarId": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        }
      },
      "xml": {
        "name": "user"
      },
      "example": {
        "_id": "5",
        "avatarId": "",
        "firstname": "Marty",
        "lastname": "McFlfy"
      }
    },
    "offeringLocation": {
      "type": "object",
      "properties": {
        "coordinates": {
          "description": "longitude then latidue as floats",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "type": {
          "type": "string"
        }
      },
      "x-go-gen-location": "models"
    }
  },
  "responses": {
    "ErrorResponse": {
      "description": "Generic Error",
      "schema": {
        "$ref": "#/definitions/ErrorModel"
      }
    },
    "InvalidParameterInput": {
      "description": "Invalid parameter input was passed",
      "schema": {
        "$ref": "#/definitions/InvalidParameterInput"
      }
    },
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "$ref": "#/definitions/ErrorModel"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/ErrorModel"
      }
    },
    "Unhealthy": {
      "description": "Server is unhealthy",
      "schema": {
        "$ref": "#/definitions/ErrorModel"
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ],
  "tags": [
    {
      "description": "Management of users",
      "name": "users"
    },
    {
      "description": "Management of offered food items",
      "name": "offerings"
    },
    {
      "description": "Operations about users",
      "name": "messages"
    },
    {
      "description": "Operation regarding helath of application",
      "name": "health"
    }
  ]
}`))
}
