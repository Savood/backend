// Code generated by go-swagger; DO NOT EDIT.

package profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/savood/backend/models"
)

// ProfileIDDeleteNoContentCode is the HTTP code returned for type ProfileIDDeleteNoContent
const ProfileIDDeleteNoContentCode int = 204

/*ProfileIDDeleteNoContent Removed; No response.

swagger:response profileIdDeleteNoContent
*/
type ProfileIDDeleteNoContent struct {
}

// NewProfileIDDeleteNoContent creates ProfileIDDeleteNoContent with default headers values
func NewProfileIDDeleteNoContent() *ProfileIDDeleteNoContent {

	return &ProfileIDDeleteNoContent{}
}

// WriteResponse to the client
func (o *ProfileIDDeleteNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// ProfileIDDeleteNotFoundCode is the HTTP code returned for type ProfileIDDeleteNotFound
const ProfileIDDeleteNotFoundCode int = 404

/*ProfileIDDeleteNotFound Invalid parameter input was passed

swagger:response profileIdDeleteNotFound
*/
type ProfileIDDeleteNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.InvalidParameterInput `json:"body,omitempty"`
}

// NewProfileIDDeleteNotFound creates ProfileIDDeleteNotFound with default headers values
func NewProfileIDDeleteNotFound() *ProfileIDDeleteNotFound {

	return &ProfileIDDeleteNotFound{}
}

// WithPayload adds the payload to the profile Id delete not found response
func (o *ProfileIDDeleteNotFound) WithPayload(payload *models.InvalidParameterInput) *ProfileIDDeleteNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the profile Id delete not found response
func (o *ProfileIDDeleteNotFound) SetPayload(payload *models.InvalidParameterInput) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProfileIDDeleteNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
