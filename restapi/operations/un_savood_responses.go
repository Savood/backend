// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/savood/backend/models"
)

// UnSavoodNoContentCode is the HTTP code returned for type UnSavoodNoContent
const UnSavoodNoContentCode int = 204

/*UnSavoodNoContent Savood is deleted

swagger:response unSavoodNoContent
*/
type UnSavoodNoContent struct {
}

// NewUnSavoodNoContent creates UnSavoodNoContent with default headers values
func NewUnSavoodNoContent() *UnSavoodNoContent {

	return &UnSavoodNoContent{}
}

// WriteResponse to the client
func (o *UnSavoodNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// UnSavoodBadRequestCode is the HTTP code returned for type UnSavoodBadRequest
const UnSavoodBadRequestCode int = 400

/*UnSavoodBadRequest Invalid parameter input was passed

swagger:response unSavoodBadRequest
*/
type UnSavoodBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.InvalidParameterInput `json:"body,omitempty"`
}

// NewUnSavoodBadRequest creates UnSavoodBadRequest with default headers values
func NewUnSavoodBadRequest() *UnSavoodBadRequest {

	return &UnSavoodBadRequest{}
}

// WithPayload adds the payload to the un savood bad request response
func (o *UnSavoodBadRequest) WithPayload(payload *models.InvalidParameterInput) *UnSavoodBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the un savood bad request response
func (o *UnSavoodBadRequest) SetPayload(payload *models.InvalidParameterInput) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UnSavoodBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
