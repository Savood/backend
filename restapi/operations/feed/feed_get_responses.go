// Code generated by go-swagger; DO NOT EDIT.

package feed

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/savood/backend/models"
)

// FeedGetOKCode is the HTTP code returned for type FeedGetOK
const FeedGetOKCode int = 200

/*FeedGetOK Object found and returned

swagger:response feedGetOK
*/
type FeedGetOK struct {

	/*
	  In: Body
	*/
	Payload models.Feed `json:"body,omitempty"`
}

// NewFeedGetOK creates FeedGetOK with default headers values
func NewFeedGetOK() *FeedGetOK {

	return &FeedGetOK{}
}

// WithPayload adds the payload to the feed get o k response
func (o *FeedGetOK) WithPayload(payload models.Feed) *FeedGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the feed get o k response
func (o *FeedGetOK) SetPayload(payload models.Feed) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FeedGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.Feed, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// FeedGetNotFoundCode is the HTTP code returned for type FeedGetNotFound
const FeedGetNotFoundCode int = 404

/*FeedGetNotFound Invalid parameter input was passed

swagger:response feedGetNotFound
*/
type FeedGetNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.InvalidParameterInput `json:"body,omitempty"`
}

// NewFeedGetNotFound creates FeedGetNotFound with default headers values
func NewFeedGetNotFound() *FeedGetNotFound {

	return &FeedGetNotFound{}
}

// WithPayload adds the payload to the feed get not found response
func (o *FeedGetNotFound) WithPayload(payload *models.InvalidParameterInput) *FeedGetNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the feed get not found response
func (o *FeedGetNotFound) SetPayload(payload *models.InvalidParameterInput) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FeedGetNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
