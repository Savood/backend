// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/savood/backend/models"
)

// GetUsersIDImageJpegOKCode is the HTTP code returned for type GetUsersIDImageJpegOK
const GetUsersIDImageJpegOKCode int = 200

/*GetUsersIDImageJpegOK OK

swagger:response getUsersIdImageJpegOK
*/
type GetUsersIDImageJpegOK struct {

	/*
	  In: Body
	*/
	Payload models.GetUsersIDImageJpegOKBody `json:"body,omitempty"`
}

// NewGetUsersIDImageJpegOK creates GetUsersIDImageJpegOK with default headers values
func NewGetUsersIDImageJpegOK() *GetUsersIDImageJpegOK {

	return &GetUsersIDImageJpegOK{}
}

// WithPayload adds the payload to the get users Id image jpeg o k response
func (o *GetUsersIDImageJpegOK) WithPayload(payload models.GetUsersIDImageJpegOKBody) *GetUsersIDImageJpegOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get users Id image jpeg o k response
func (o *GetUsersIDImageJpegOK) SetPayload(payload models.GetUsersIDImageJpegOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUsersIDImageJpegOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetUsersIDImageJpegNotFoundCode is the HTTP code returned for type GetUsersIDImageJpegNotFound
const GetUsersIDImageJpegNotFoundCode int = 404

/*GetUsersIDImageJpegNotFound The specified resource was not found

swagger:response getUsersIdImageJpegNotFound
*/
type GetUsersIDImageJpegNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewGetUsersIDImageJpegNotFound creates GetUsersIDImageJpegNotFound with default headers values
func NewGetUsersIDImageJpegNotFound() *GetUsersIDImageJpegNotFound {

	return &GetUsersIDImageJpegNotFound{}
}

// WithPayload adds the payload to the get users Id image jpeg not found response
func (o *GetUsersIDImageJpegNotFound) WithPayload(payload *models.ErrorModel) *GetUsersIDImageJpegNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get users Id image jpeg not found response
func (o *GetUsersIDImageJpegNotFound) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUsersIDImageJpegNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUsersIDImageJpegInternalServerErrorCode is the HTTP code returned for type GetUsersIDImageJpegInternalServerError
const GetUsersIDImageJpegInternalServerErrorCode int = 500

/*GetUsersIDImageJpegInternalServerError Generic Error

swagger:response getUsersIdImageJpegInternalServerError
*/
type GetUsersIDImageJpegInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewGetUsersIDImageJpegInternalServerError creates GetUsersIDImageJpegInternalServerError with default headers values
func NewGetUsersIDImageJpegInternalServerError() *GetUsersIDImageJpegInternalServerError {

	return &GetUsersIDImageJpegInternalServerError{}
}

// WithPayload adds the payload to the get users Id image jpeg internal server error response
func (o *GetUsersIDImageJpegInternalServerError) WithPayload(payload *models.ErrorModel) *GetUsersIDImageJpegInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get users Id image jpeg internal server error response
func (o *GetUsersIDImageJpegInternalServerError) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUsersIDImageJpegInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
