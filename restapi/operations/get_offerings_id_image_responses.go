// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/savood/backend/models"
)

// GetOfferingsIDImageOKCode is the HTTP code returned for type GetOfferingsIDImageOK
const GetOfferingsIDImageOKCode int = 200

/*GetOfferingsIDImageOK OK

swagger:response getOfferingsIdImageOK
*/
type GetOfferingsIDImageOK struct {

	/*
	  In: Body
	*/
	Payload models.GetOfferingsIDImageOKBody `json:"body,omitempty"`
}

// NewGetOfferingsIDImageOK creates GetOfferingsIDImageOK with default headers values
func NewGetOfferingsIDImageOK() *GetOfferingsIDImageOK {

	return &GetOfferingsIDImageOK{}
}

// WithPayload adds the payload to the get offerings Id image o k response
func (o *GetOfferingsIDImageOK) WithPayload(payload models.GetOfferingsIDImageOKBody) *GetOfferingsIDImageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get offerings Id image o k response
func (o *GetOfferingsIDImageOK) SetPayload(payload models.GetOfferingsIDImageOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOfferingsIDImageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetOfferingsIDImageNotFoundCode is the HTTP code returned for type GetOfferingsIDImageNotFound
const GetOfferingsIDImageNotFoundCode int = 404

/*GetOfferingsIDImageNotFound The specified resource was not found

swagger:response getOfferingsIdImageNotFound
*/
type GetOfferingsIDImageNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewGetOfferingsIDImageNotFound creates GetOfferingsIDImageNotFound with default headers values
func NewGetOfferingsIDImageNotFound() *GetOfferingsIDImageNotFound {

	return &GetOfferingsIDImageNotFound{}
}

// WithPayload adds the payload to the get offerings Id image not found response
func (o *GetOfferingsIDImageNotFound) WithPayload(payload *models.ErrorModel) *GetOfferingsIDImageNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get offerings Id image not found response
func (o *GetOfferingsIDImageNotFound) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOfferingsIDImageNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOfferingsIDImageInternalServerErrorCode is the HTTP code returned for type GetOfferingsIDImageInternalServerError
const GetOfferingsIDImageInternalServerErrorCode int = 500

/*GetOfferingsIDImageInternalServerError Generic Error

swagger:response getOfferingsIdImageInternalServerError
*/
type GetOfferingsIDImageInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewGetOfferingsIDImageInternalServerError creates GetOfferingsIDImageInternalServerError with default headers values
func NewGetOfferingsIDImageInternalServerError() *GetOfferingsIDImageInternalServerError {

	return &GetOfferingsIDImageInternalServerError{}
}

// WithPayload adds the payload to the get offerings Id image internal server error response
func (o *GetOfferingsIDImageInternalServerError) WithPayload(payload *models.ErrorModel) *GetOfferingsIDImageInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get offerings Id image internal server error response
func (o *GetOfferingsIDImageInternalServerError) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOfferingsIDImageInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
