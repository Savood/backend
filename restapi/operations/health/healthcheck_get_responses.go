// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/backend/models"
)

// HealthcheckGetOKCode is the HTTP code returned for type HealthcheckGetOK
const HealthcheckGetOKCode int = 200

/*HealthcheckGetOK Server is healthy

swagger:response healthcheckGetOK
*/
type HealthcheckGetOK struct {
}

// NewHealthcheckGetOK creates HealthcheckGetOK with default headers values
func NewHealthcheckGetOK() *HealthcheckGetOK {

	return &HealthcheckGetOK{}
}

// WriteResponse to the client
func (o *HealthcheckGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// HealthcheckGetServiceUnavailableCode is the HTTP code returned for type HealthcheckGetServiceUnavailable
const HealthcheckGetServiceUnavailableCode int = 503

/*HealthcheckGetServiceUnavailable Server is unhealthy

swagger:response healthcheckGetServiceUnavailable
*/
type HealthcheckGetServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewHealthcheckGetServiceUnavailable creates HealthcheckGetServiceUnavailable with default headers values
func NewHealthcheckGetServiceUnavailable() *HealthcheckGetServiceUnavailable {

	return &HealthcheckGetServiceUnavailable{}
}

// WithPayload adds the payload to the healthcheck get service unavailable response
func (o *HealthcheckGetServiceUnavailable) WithPayload(payload *models.ErrorModel) *HealthcheckGetServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the healthcheck get service unavailable response
func (o *HealthcheckGetServiceUnavailable) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *HealthcheckGetServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
