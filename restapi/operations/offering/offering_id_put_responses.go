// Code generated by go-swagger; DO NOT EDIT.

package offering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/savood/backend/models"
)

// OfferingIDPutNoContentCode is the HTTP code returned for type OfferingIDPutNoContent
const OfferingIDPutNoContentCode int = 204

/*OfferingIDPutNoContent Accepted; No response.

swagger:response offeringIdPutNoContent
*/
type OfferingIDPutNoContent struct {
}

// NewOfferingIDPutNoContent creates OfferingIDPutNoContent with default headers values
func NewOfferingIDPutNoContent() *OfferingIDPutNoContent {

	return &OfferingIDPutNoContent{}
}

// WriteResponse to the client
func (o *OfferingIDPutNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// OfferingIDPutNotFoundCode is the HTTP code returned for type OfferingIDPutNotFound
const OfferingIDPutNotFoundCode int = 404

/*OfferingIDPutNotFound Invalid parameter input was passed

swagger:response offeringIdPutNotFound
*/
type OfferingIDPutNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.InvalidParameterInput `json:"body,omitempty"`
}

// NewOfferingIDPutNotFound creates OfferingIDPutNotFound with default headers values
func NewOfferingIDPutNotFound() *OfferingIDPutNotFound {

	return &OfferingIDPutNotFound{}
}

// WithPayload adds the payload to the offering Id put not found response
func (o *OfferingIDPutNotFound) WithPayload(payload *models.InvalidParameterInput) *OfferingIDPutNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the offering Id put not found response
func (o *OfferingIDPutNotFound) SetPayload(payload *models.InvalidParameterInput) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *OfferingIDPutNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
