// Code generated by go-swagger; DO NOT EDIT.

package offering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// OfferingIDGetHandlerFunc turns a function with the right signature into a offering Id get handler
type OfferingIDGetHandlerFunc func(OfferingIDGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn OfferingIDGetHandlerFunc) Handle(params OfferingIDGetParams) middleware.Responder {
	return fn(params)
}

// OfferingIDGetHandler interface for that can handle valid offering Id get params
type OfferingIDGetHandler interface {
	Handle(OfferingIDGetParams) middleware.Responder
}

// NewOfferingIDGet creates a new http.Handler for the offering Id get operation
func NewOfferingIDGet(ctx *middleware.Context, handler OfferingIDGetHandler) *OfferingIDGet {
	return &OfferingIDGet{Context: ctx, Handler: handler}
}

/*OfferingIDGet swagger:route GET /offering/{id} offering offeringIdGet

Display an offering

*/
type OfferingIDGet struct {
	Context *middleware.Context
	Handler OfferingIDGetHandler
}

func (o *OfferingIDGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewOfferingIDGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
