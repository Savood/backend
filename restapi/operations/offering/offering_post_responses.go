// Code generated by go-swagger; DO NOT EDIT.

package offering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/savood/backend/models"
)

// OfferingPostOKCode is the HTTP code returned for type OfferingPostOK
const OfferingPostOKCode int = 200

/*OfferingPostOK Object found and returned

swagger:response offeringPostOK
*/
type OfferingPostOK struct {

	/*
	  In: Body
	*/
	Payload *models.Offering `json:"body,omitempty"`
}

// NewOfferingPostOK creates OfferingPostOK with default headers values
func NewOfferingPostOK() *OfferingPostOK {

	return &OfferingPostOK{}
}

// WithPayload adds the payload to the offering post o k response
func (o *OfferingPostOK) WithPayload(payload *models.Offering) *OfferingPostOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the offering post o k response
func (o *OfferingPostOK) SetPayload(payload *models.Offering) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *OfferingPostOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// OfferingPostNotFoundCode is the HTTP code returned for type OfferingPostNotFound
const OfferingPostNotFoundCode int = 404

/*OfferingPostNotFound Invalid parameter input was passed

swagger:response offeringPostNotFound
*/
type OfferingPostNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.InvalidParameterInput `json:"body,omitempty"`
}

// NewOfferingPostNotFound creates OfferingPostNotFound with default headers values
func NewOfferingPostNotFound() *OfferingPostNotFound {

	return &OfferingPostNotFound{}
}

// WithPayload adds the payload to the offering post not found response
func (o *OfferingPostNotFound) WithPayload(payload *models.InvalidParameterInput) *OfferingPostNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the offering post not found response
func (o *OfferingPostNotFound) SetPayload(payload *models.InvalidParameterInput) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *OfferingPostNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
