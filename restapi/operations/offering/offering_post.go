// Code generated by go-swagger; DO NOT EDIT.

package offering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// OfferingPostHandlerFunc turns a function with the right signature into a offering post handler
type OfferingPostHandlerFunc func(OfferingPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn OfferingPostHandlerFunc) Handle(params OfferingPostParams) middleware.Responder {
	return fn(params)
}

// OfferingPostHandler interface for that can handle valid offering post params
type OfferingPostHandler interface {
	Handle(OfferingPostParams) middleware.Responder
}

// NewOfferingPost creates a new http.Handler for the offering post operation
func NewOfferingPost(ctx *middleware.Context, handler OfferingPostHandler) *OfferingPost {
	return &OfferingPost{Context: ctx, Handler: handler}
}

/*OfferingPost swagger:route POST /offering offering offeringPost

Add a new offering

*/
type OfferingPost struct {
	Context *middleware.Context
	Handler OfferingPostHandler
}

func (o *OfferingPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewOfferingPostParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
