// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/backend/models"
)

// DeleteUserByIDNoContentCode is the HTTP code returned for type DeleteUserByIDNoContent
const DeleteUserByIDNoContentCode int = 204

/*DeleteUserByIDNoContent Removed; No response.

swagger:response deleteUserByIdNoContent
*/
type DeleteUserByIDNoContent struct {
}

// NewDeleteUserByIDNoContent creates DeleteUserByIDNoContent with default headers values
func NewDeleteUserByIDNoContent() *DeleteUserByIDNoContent {

	return &DeleteUserByIDNoContent{}
}

// WriteResponse to the client
func (o *DeleteUserByIDNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteUserByIDBadRequestCode is the HTTP code returned for type DeleteUserByIDBadRequest
const DeleteUserByIDBadRequestCode int = 400

/*DeleteUserByIDBadRequest Invalid parameter input was passed

swagger:response deleteUserByIdBadRequest
*/
type DeleteUserByIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.InvalidParameterInput `json:"body,omitempty"`
}

// NewDeleteUserByIDBadRequest creates DeleteUserByIDBadRequest with default headers values
func NewDeleteUserByIDBadRequest() *DeleteUserByIDBadRequest {

	return &DeleteUserByIDBadRequest{}
}

// WithPayload adds the payload to the delete user by Id bad request response
func (o *DeleteUserByIDBadRequest) WithPayload(payload *models.InvalidParameterInput) *DeleteUserByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user by Id bad request response
func (o *DeleteUserByIDBadRequest) SetPayload(payload *models.InvalidParameterInput) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
