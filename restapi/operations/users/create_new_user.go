// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "git.dhbw.chd.cx/savood/backend/models"
)

// CreateNewUserHandlerFunc turns a function with the right signature into a create new user handler
type CreateNewUserHandlerFunc func(CreateNewUserParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateNewUserHandlerFunc) Handle(params CreateNewUserParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateNewUserHandler interface for that can handle valid create new user params
type CreateNewUserHandler interface {
	Handle(CreateNewUserParams, *models.Principal) middleware.Responder
}

// NewCreateNewUser creates a new http.Handler for the create new user operation
func NewCreateNewUser(ctx *middleware.Context, handler CreateNewUserHandler) *CreateNewUser {
	return &CreateNewUser{Context: ctx, Handler: handler}
}

/*CreateNewUser swagger:route POST /users users createNewUser

Add a new user

*/
type CreateNewUser struct {
	Context *middleware.Context
	Handler CreateNewUserHandler
}

func (o *CreateNewUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateNewUserParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
