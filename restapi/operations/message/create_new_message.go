// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateNewMessageHandlerFunc turns a function with the right signature into a create new message handler
type CreateNewMessageHandlerFunc func(CreateNewMessageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateNewMessageHandlerFunc) Handle(params CreateNewMessageParams) middleware.Responder {
	return fn(params)
}

// CreateNewMessageHandler interface for that can handle valid create new message params
type CreateNewMessageHandler interface {
	Handle(CreateNewMessageParams) middleware.Responder
}

// NewCreateNewMessage creates a new http.Handler for the create new message operation
func NewCreateNewMessage(ctx *middleware.Context, handler CreateNewMessageHandler) *CreateNewMessage {
	return &CreateNewMessage{Context: ctx, Handler: handler}
}

/*CreateNewMessage swagger:route POST /message message createNewMessage

Add a new message

*/
type CreateNewMessage struct {
	Context *middleware.Context
	Handler CreateNewMessageHandler
}

func (o *CreateNewMessage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateNewMessageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
