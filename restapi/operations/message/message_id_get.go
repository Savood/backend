// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// MessageIDGetHandlerFunc turns a function with the right signature into a message Id get handler
type MessageIDGetHandlerFunc func(MessageIDGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MessageIDGetHandlerFunc) Handle(params MessageIDGetParams) middleware.Responder {
	return fn(params)
}

// MessageIDGetHandler interface for that can handle valid message Id get params
type MessageIDGetHandler interface {
	Handle(MessageIDGetParams) middleware.Responder
}

// NewMessageIDGet creates a new http.Handler for the message Id get operation
func NewMessageIDGet(ctx *middleware.Context, handler MessageIDGetHandler) *MessageIDGet {
	return &MessageIDGet{Context: ctx, Handler: handler}
}

/*MessageIDGet swagger:route GET /message/{id} message messageIdGet

Display an message

*/
type MessageIDGet struct {
	Context *middleware.Context
	Handler MessageIDGetHandler
}

func (o *MessageIDGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMessageIDGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
