// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/savood/backend/models"
)

// MessageIDDeleteNoContentCode is the HTTP code returned for type MessageIDDeleteNoContent
const MessageIDDeleteNoContentCode int = 204

/*MessageIDDeleteNoContent Removed; No response.

swagger:response messageIdDeleteNoContent
*/
type MessageIDDeleteNoContent struct {
}

// NewMessageIDDeleteNoContent creates MessageIDDeleteNoContent with default headers values
func NewMessageIDDeleteNoContent() *MessageIDDeleteNoContent {

	return &MessageIDDeleteNoContent{}
}

// WriteResponse to the client
func (o *MessageIDDeleteNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// MessageIDDeleteNotFoundCode is the HTTP code returned for type MessageIDDeleteNotFound
const MessageIDDeleteNotFoundCode int = 404

/*MessageIDDeleteNotFound Invalid parameter input was passed

swagger:response messageIdDeleteNotFound
*/
type MessageIDDeleteNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.InvalidParameterInput `json:"body,omitempty"`
}

// NewMessageIDDeleteNotFound creates MessageIDDeleteNotFound with default headers values
func NewMessageIDDeleteNotFound() *MessageIDDeleteNotFound {

	return &MessageIDDeleteNotFound{}
}

// WithPayload adds the payload to the message Id delete not found response
func (o *MessageIDDeleteNotFound) WithPayload(payload *models.InvalidParameterInput) *MessageIDDeleteNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the message Id delete not found response
func (o *MessageIDDeleteNotFound) SetPayload(payload *models.InvalidParameterInput) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MessageIDDeleteNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
