// Code generated by go-swagger; DO NOT EDIT.

package offerings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/savood/backend/models"
)

// CreateNewOfferingOKCode is the HTTP code returned for type CreateNewOfferingOK
const CreateNewOfferingOKCode int = 200

/*CreateNewOfferingOK Object found and returned

swagger:response createNewOfferingOK
*/
type CreateNewOfferingOK struct {

	/*
	  In: Body
	*/
	Payload *models.Offering `json:"body,omitempty"`
}

// NewCreateNewOfferingOK creates CreateNewOfferingOK with default headers values
func NewCreateNewOfferingOK() *CreateNewOfferingOK {

	return &CreateNewOfferingOK{}
}

// WithPayload adds the payload to the create new offering o k response
func (o *CreateNewOfferingOK) WithPayload(payload *models.Offering) *CreateNewOfferingOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create new offering o k response
func (o *CreateNewOfferingOK) SetPayload(payload *models.Offering) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateNewOfferingOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateNewOfferingBadRequestCode is the HTTP code returned for type CreateNewOfferingBadRequest
const CreateNewOfferingBadRequestCode int = 400

/*CreateNewOfferingBadRequest Invalid parameter input was passed

swagger:response createNewOfferingBadRequest
*/
type CreateNewOfferingBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.InvalidParameterInput `json:"body,omitempty"`
}

// NewCreateNewOfferingBadRequest creates CreateNewOfferingBadRequest with default headers values
func NewCreateNewOfferingBadRequest() *CreateNewOfferingBadRequest {

	return &CreateNewOfferingBadRequest{}
}

// WithPayload adds the payload to the create new offering bad request response
func (o *CreateNewOfferingBadRequest) WithPayload(payload *models.InvalidParameterInput) *CreateNewOfferingBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create new offering bad request response
func (o *CreateNewOfferingBadRequest) SetPayload(payload *models.InvalidParameterInput) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateNewOfferingBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateNewOfferingInternalServerErrorCode is the HTTP code returned for type CreateNewOfferingInternalServerError
const CreateNewOfferingInternalServerErrorCode int = 500

/*CreateNewOfferingInternalServerError Generic Error

swagger:response createNewOfferingInternalServerError
*/
type CreateNewOfferingInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewCreateNewOfferingInternalServerError creates CreateNewOfferingInternalServerError with default headers values
func NewCreateNewOfferingInternalServerError() *CreateNewOfferingInternalServerError {

	return &CreateNewOfferingInternalServerError{}
}

// WithPayload adds the payload to the create new offering internal server error response
func (o *CreateNewOfferingInternalServerError) WithPayload(payload *models.ErrorModel) *CreateNewOfferingInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create new offering internal server error response
func (o *CreateNewOfferingInternalServerError) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateNewOfferingInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
