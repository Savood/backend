// Code generated by go-swagger; DO NOT EDIT.

package offerings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/savood/backend/models"
)

// GetOfferingsOKCode is the HTTP code returned for type GetOfferingsOK
const GetOfferingsOKCode int = 200

/*GetOfferingsOK Object found and returned

swagger:response getOfferingsOK
*/
type GetOfferingsOK struct {

	/*
	  In: Body
	*/
	Payload models.Offerings `json:"body,omitempty"`
}

// NewGetOfferingsOK creates GetOfferingsOK with default headers values
func NewGetOfferingsOK() *GetOfferingsOK {

	return &GetOfferingsOK{}
}

// WithPayload adds the payload to the get offerings o k response
func (o *GetOfferingsOK) WithPayload(payload models.Offerings) *GetOfferingsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get offerings o k response
func (o *GetOfferingsOK) SetPayload(payload models.Offerings) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOfferingsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.Offerings, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetOfferingsNotFoundCode is the HTTP code returned for type GetOfferingsNotFound
const GetOfferingsNotFoundCode int = 404

/*GetOfferingsNotFound Invalid parameter input was passed

swagger:response getOfferingsNotFound
*/
type GetOfferingsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.InvalidParameterInput `json:"body,omitempty"`
}

// NewGetOfferingsNotFound creates GetOfferingsNotFound with default headers values
func NewGetOfferingsNotFound() *GetOfferingsNotFound {

	return &GetOfferingsNotFound{}
}

// WithPayload adds the payload to the get offerings not found response
func (o *GetOfferingsNotFound) WithPayload(payload *models.InvalidParameterInput) *GetOfferingsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get offerings not found response
func (o *GetOfferingsNotFound) SetPayload(payload *models.InvalidParameterInput) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOfferingsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
