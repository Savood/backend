// Code generated by go-swagger; DO NOT EDIT.

package offerings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.dhbw.chd.cx/savood/backend/models"
)

// GetFeedOKCode is the HTTP code returned for type GetFeedOK
const GetFeedOKCode int = 200

/*GetFeedOK Object found and returned

swagger:response getFeedOK
*/
type GetFeedOK struct {

	/*
	  In: Body
	*/
	Payload models.Offerings `json:"body,omitempty"`
}

// NewGetFeedOK creates GetFeedOK with default headers values
func NewGetFeedOK() *GetFeedOK {

	return &GetFeedOK{}
}

// WithPayload adds the payload to the get feed o k response
func (o *GetFeedOK) WithPayload(payload models.Offerings) *GetFeedOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get feed o k response
func (o *GetFeedOK) SetPayload(payload models.Offerings) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFeedOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.Offerings, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetFeedNotFoundCode is the HTTP code returned for type GetFeedNotFound
const GetFeedNotFoundCode int = 404

/*GetFeedNotFound Invalid parameter input was passed

swagger:response getFeedNotFound
*/
type GetFeedNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.InvalidParameterInput `json:"body,omitempty"`
}

// NewGetFeedNotFound creates GetFeedNotFound with default headers values
func NewGetFeedNotFound() *GetFeedNotFound {

	return &GetFeedNotFound{}
}

// WithPayload adds the payload to the get feed not found response
func (o *GetFeedNotFound) WithPayload(payload *models.InvalidParameterInput) *GetFeedNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get feed not found response
func (o *GetFeedNotFound) SetPayload(payload *models.InvalidParameterInput) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFeedNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
